NODE

============================
require

funço que permite importar modulos e arquivos

===========================

Criar sever 
exemplo

var http = require('http');

var server = http.createServer(funcrion(req, res){
	res.end('exemplo');
);

server.listen(3000);

============================
pegar valor url 

.url

===========================
iniciar npm

npm init

next next next 

=======================================
Express

npm install express --save

iniciando servidor com express

var express = require('express');

var app = express();

app.listen(3000, function(){
	console.log('servidor com express');
});


traçando rota
app.get('/', function(req, res){
	app.send('nossa pagina exemplo');
});

=========================================
EJS

npm install ejs --save

setando modulo de origem e formato do arquivo no motor de views
app.set('view engine' ,'ejs');

modulo sender é subistituido pelo render

Recuperar informação na view

res.render('exemple/exemple', {exemple: value})
=============================================
exporta modulos criados

var msg = 'exemple';

module.exports = msg;

==========================================
MySQL start
sudo systemctl start mysql

chamar shell do mysql
mysql -u root -p

===========================================
Consign - modulo de autoLoad

incluir rostas altomaticamente

var consign = require('consign');

consign()
    .include('app/routes')
    .then('exemple')
    .into(app);

ingnorar arquivos

apenas adicionar o nome do arquivo que deseja incluir necessario formato

============================================================================

envios de formulario

npm install body-parser --save

var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: true}));

============================================================================
redirecionar para outra pagina

res.redirect();

==========================================================================

validar dados 

modulo npm

npm install express-validator --save

exemplo atual

const { check, validationResult } = require('express-validator');

app.post('/user', [
  // username must be an email
  check('username').isEmail(),
  // password must be at least 5 chars long
  check('password').isLength({ min: 5 })
], (req, res) => {
  // Finds the validation errors in this request and wraps them in an object with handy functions
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(422).json({ errors: errors.array() });
  }

  User.create({
    username: req.body.username,
    password: req.body.password
  }).then(user => res.json(user));
});
